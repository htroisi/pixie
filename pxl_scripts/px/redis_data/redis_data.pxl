# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

''' Redis Data Tracer

This script traces all Redis data on the cluster.
'''

import px

def redis_data(start: str, num_head: int):

    # redis_events.beta is a beta table, which is subject to change.
    df = px.DataFrame(table='redis_events.beta', start_time=start)

    # Calculate source and destination entities. 
    df = add_source_dest_columns(df, start)

    # TODO: move this above add_source_dest_columns() after bug is fixed. 
    # Restrict number of results.
    df = df.head(num_head)

    return df['time_', 'source', 'destination', 'remote_port', 'cmd', 
            'cmd_args', 'resp', 'latency_ns']

def add_source_dest_columns(df, start: str):
    ''' Add request source and destination columns to protocol datasource table. 

    @df: The input *_events table which should contain a `trace_role`, 
    `upid`, and `remote_addr` column.

    Returns: Returns a DataFrame containing columns for the source
    and destination entity for the protocol request. 
    '''
    # Replace UPID with pod.
    df.pod = df.ctx['pod']
    df.namespace = df.ctx['namespace']

    # TODO: remove hack to get around PP-2445.
    df.head(1000000000)

    # If remote_addr entity is a pod, get its name. If not, keep IP address.
    df.remote_addr_pod_name = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
    df.is_remote_addr_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr)) != ''
    df.remote_addr_name = px.select(df.is_remote_addr_pod, df.remote_addr_pod_name, df.remote_addr)

    # For client-side tracing (trace_role==1), server-side traceing (trace_role==2).
    df.server_side_tracing = df.trace_role == 2

    # Set source and destination based on trace_role. 
    df.destination = px.select(df.server_side_tracing, df.pod, df.remote_addr_name)
    df.source = px.select(df.server_side_tracing, df.remote_addr_name, df.pod)

    df = df.drop(['server_side_tracing', 'remote_addr_pod_name', 'is_remote_addr_pod', 
                  'remote_addr_name'])

    return df