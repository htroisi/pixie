# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

''' DNS Traffic FQDN List
Lists external, fully qualified domain names (FQDNs) from all DNS traffic on the cluster for a specified amount of time.
'''

import px

def fqdns(start: str):

    # The dns_events table pairs DNS requests with their responses.
    df = px.DataFrame(table='dns_events', start_time=start)

    # Parse the DNS respoonse to determine if it was successfully resolved.
    df.resp_body = px.pluck(df.resp_body, 'answers')
    df.request_resolved = px.contains(df.resp_body, 'name')

    # Parse the DNS request for query name.
    df.req_body = px.pluck(df.req_body, 'queries')
    df.idx1 = px.find(df.req_body, '\"name\":')
    df.query_name_partial = px.substring(df.req_body, df.idx1 + 8, px.length(df.req_body) - (df.idx1 + 8) - 3)
    df.idx2 = px.find(df.query_name_partial, ',')
    df.name = px.substring(df.query_name_partial, 0, df.idx2 - 1)

    # Filter for resolved requests
    df = df[df.request_resolved == True]

    # Filter out queries for local domain names
    df = df[not px.contains(df.name,'.local')]

    # Add link to script that will show all requests for specific query.
    df.link = px.script_reference('Link to all DNS requests', 'sotw/ndots_all_queries', {
        'start_time': start,
        'hostname': df.name
    })

    # Group by query name and aggregate count of requests
    df = df.groupby(['name', 'link']).agg(
        num_requests=('request_resolved', px.count)
    )

    return df
